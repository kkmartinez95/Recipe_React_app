{"version":3,"sources":["recipe.module.css","girl.png","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","indx","key","text","toFixed","pic","src","alt","girl","require","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","id","onSubmit","event","preventDefault","type","value","onChange","target","placeholder","index","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,IAAM,sB,6FCDxDD,EAAOC,QAAU,IAA0B,kC,sICkB5BC,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAWC,IAAMC,QACpB,wBAAIF,UAAU,SAASJ,GACvB,wBAAII,UAAU,eACXD,EAAYI,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIC,IAAKD,GAAOD,EAAWG,UAG/B,wCAAcV,EAASW,QAAQ,IAC/B,yBAAKR,UAAWC,IAAMQ,IAAKC,IAAKZ,EAAOa,IAAI,OCT3CC,EAAOC,EAAQ,IAiENC,EA/DH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,SANnB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MALC,2CAAH,qDAiBhB,OACE,yBAAK7B,UAAU,OACb,yBAAK8B,GAAG,UACN,wBAAI9B,UAAU,WAAd,wBACA,yBAAKA,UAAU,OAAOU,IAAKE,EAAMD,IAAI,MAGvC,0BAAMX,UAAU,cAAc+B,SAZhB,SAACC,GACjBA,EAAMC,iBACNZ,EAASH,GACTC,EAAU,MAUN,2BACEnB,UAAU,aACVkC,KAAK,OACLC,MAAOjB,EACPkB,SArBa,SAACJ,GACpBb,EAAUa,EAAMK,OAAOF,QAqBjBG,YAAY,6BAEd,4BAAQtC,UAAU,gBAAgBkC,KAAK,UAAvC,YAIF,yBAAKlC,UAAU,qBACZgB,EAAQb,KAAI,SAACD,EAAQqC,GAAT,OACX,kBAAC,EAAD,CACEjC,IAAKiC,EACL3C,MAAOM,EAAOA,OAAOsC,MACrB3C,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,oBCjDnB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f09cce7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"pic\":\"recipe_pic__1ABBP\"};","module.exports = __webpack_public_path__ + \"static/media/girl.2a816fbc.png\";","import React from 'react';\nimport style from './recipe.module.css';\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className={style.recipe}>\n      <h1 className=\"title\">{title}</h1>\n      <ol className=\"ingredients\">\n        {ingredients.map((ingredient, indx) => (\n          <li key={indx}>{ingredient.text}</li>\n        ))}\n      </ol>\n      <p>Calories: {calories.toFixed(2)}</p>\n      <img className={style.pic} src={image} alt=\"\"></img>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nconst girl = require('./girl.png');\n\nconst App = () => {\n  const APP_ID = '6a8a5b30';\n  const APP_KEY = 'd2781d2c59f841afcf4fa6ed61c7dca6';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('apple');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const getSearch = (event) => {\n    event.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n  return (\n    <div className=\"App\">\n      <div id=\"header\">\n        <h1 className=\"kaitlyn\">Kaitlyn's Recipe App</h1>\n        <img className=\"girl\" src={girl} alt=\"\" />\n      </div>\n\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={updateSearch}\n          placeholder=\"Search for Recipes Here!\"\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search!\n        </button>\n      </form>\n      <div className=\"parent-of-recipes\">\n        {recipes.map((recipe, index) => (\n          <Recipe\n            key={index}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}